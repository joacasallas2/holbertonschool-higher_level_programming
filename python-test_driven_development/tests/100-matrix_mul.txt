=============================
How to Use 100-matrix_mul.py
=============================

This library has one function called
``matrix_mul(m_a, m_b)``.

Usage
======

``matrix_mul(m_a, m_b)`` multiplies 2 matrices

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

Check if m_a and m_b are lists:

::
    >>> matrix_mul("hola", [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2], [3, 4]], "hola")
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list


Check if m_a and m_b are lists:

::
    >>> matrix_mul(["hola", [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul([[1, 2], [3, 4]], ["hola", [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists


Check if m_a and m_b are non-empty:

::
    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> matrix_mul([[1, 2], [3, 4]], [])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty


Check if all elements in m_a and m_b are either integers or floats:

::
    >>> matrix_mul([[1, "hola"], [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [["hola", 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats


Check if m_a or m_b is not a rectangle:

::
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 4], [3, 4], [7, 1]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

    >>> matrix_mul([[1, 2, 3], [3, 4]], [[1, 2], [3, 4], [7, 1]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

Check if m_a and m_b canâ€™t be multiplied:

::
    >>> matrix_mul([[1, 2, 3]], [[3, 4], [5, 6]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied
