=================================
How to Use 101-lazy_matrix_mul.py
=================================

This library has one function called
``lazy_matrix_mul(m_a, m_b)``.

Usage
======

``lazy_matrix_mul(m_a, m_b)`` multiplies 2 matrices

::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
           [15, 22]])

Check if m_a and m_b are lists:

::
    >>> lazy_matrix_mul("hola", [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> lazy_matrix_mul([[1, 2], [3, 4]], "Holberton")
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list
    
    >>> lazy_matrix_mul([[5, 6], [7, 8]], "hola")
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list
    
    >>> lazy_matrix_mul([[]], [[5, 6], [7, 8]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty
    
    >>> lazy_matrix_mul([[5, 6], [7, 8]], [[]])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty


Check if m_a and m_b are lists:

::
    >>> lazy_matrix_mul(["hola", [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

    >>> lazy_matrix_mul([[1, 2], [3, 4]], ["hola", [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists


Check if m_a and m_b are non-empty:

::
    >>> lazy_matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

Check if there are two arguments:

    >>> lazy_matrix_mul([[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    >>> lazy_matrix_mul()
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


Check if all elements in m_a and m_b are either integers or floats:

::
    >>> lazy_matrix_mul([[1, "hola"], [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [["hola", 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

    >>> lazy_matrix_mul([[5, "6"], [7, 8]], [[5, 6], [7, 8]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats


Check if m_a or m_b is not a rectangle:

::
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 4], [3, 4], [7, 1]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

    >>> lazy_matrix_mul([[1, 2, 3], [3, 4]], [[1, 2], [3, 4], [7, 1]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

    >>> lazy_matrix_mul([[5, 6, 10], [7, 8]], [[5, 6], [7, 8]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

    >>> lazy_matrix_mul([[5, 6], [7, 8]], [[5, 6, 1], [7, 8]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

Check if m_a and m_b canâ€™t be multiplied:

::
    >>> lazy_matrix_mul([[1, 2, 3]], [[3, 4], [5, 6]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

    >>> lazy_matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied
